PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : " " | "\t" | "\r" | "\n" |
        <"//" (~["\n", "\r"])* ("\n" | "\r")> |
        <"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">;

TOKEN :
    // arithmetic
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |

	// other symbols
	< DOT : "." > |
	< COMMA : "," > |
	< SEMICOLON : ";" > |
	< EQUALS : "=" > |
	< AND : "&&" > |
	< LT : "<" > |
	< OPEN_PAREN : "(" > |
    < CLOSE_PAREN : ")" > |
    < OPEN_CURL : "{" > |
    < CLOSE_CURL : "}" > |
    < OPEN_SQUARE : "[" > |
    < CLOSE_SQUARE : "]" > |

	// keywords
	< IMPORT : "import" > |
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< PUBLIC : "public" > |
    < STATIC : "static" > |
    < VOID : "void" > |
    < MAIN : "main" > |
    < STRING : "String" > |
	< RETURN : "return" > |
	< INT : "int" > |
	< BOOLEAN : "boolean" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
    < LENGTH : "length" > |
    < TRUE : "true" > |
    < FALSE : "false" > |
    < NOT : "!" > |
    < THIS : "this" > |
    < NEW : "new" > |

	// last possibilities
	< INTEGER : (["0" - "9"])+ > |
	< IDENT : ["A" - "Z","a" - "z","_"](["A" - "Z","a" - "z","_","0" - "9"])* >
;

Program : (ImportDeclaration)* ClassDeclaration <EOF> ;

ImportDeclaration : <IMPORT> ImportPath (<DOT> ImportPath)* <SEMICOLON> ;

ImportPath: <IDENT> ({jjtThis.put("path", lastConsumedToken.getImage()); }) ;

ClassDeclaration : <CLASS> <IDENT> ({jjtThis.put("classname", lastConsumedToken.getImage()); })
                   (<EXTENDS> <IDENT> ({jjtThis.put("extends", lastConsumedToken.getImage()); }))?
                   <OPEN_CURL> (VarDeclaration)* (<PUBLIC> MainOrRegularMethod)* <CLOSE_CURL> ;

VarDeclaration : SCAN 2
                 Type
                 <IDENT> ({jjtThis.put("name", lastConsumedToken.getImage()); })
                 <SEMICOLON> ;

Type: <INT> ({jjtThis.put("type", "int"); jjtThis.put("isArray", "false"); })
            (<OPEN_SQUARE> <CLOSE_SQUARE> ({jjtThis.put("type", "int"); jjtThis.put("isArray", "true"); }))? |
            <BOOLEAN> ({jjtThis.put("type", "boolean"); jjtThis.put("isArray", "false"); }) |
            <STRING> ({jjtThis.put("type", "String"); jjtThis.put("isArray", "false"); }) |
            <IDENT> ({jjtThis.put("type", lastConsumedToken.getImage()); jjtThis.put("isArray", "false"); });

MainOrRegularMethod #void: MainMethodDef | MethodDef;

MainMethodDef: <STATIC> <VOID> ({jjtThis.put("type", "void"); jjtThis.put("isArray", "false"); }) #Type <MAIN> ({jjtThis.put("name", "main"); }) <OPEN_PAREN> CmdArgsParameter <CLOSE_PAREN>
            <OPEN_CURL> MethodContent #MethodBody <CLOSE_CURL>;

CmdArgsParameter #Parameter: <STRING> <OPEN_SQUARE> <CLOSE_SQUARE> ({jjtThis.put("type", "String"); jjtThis.put("isArray", "true"); }) #Type
                  <IDENT> ({jjtThis.put("name", lastConsumedToken.getImage()); });

MethodDef: Type
               <IDENT> ({jjtThis.put("name", lastConsumedToken.getImage()); })
               <OPEN_PAREN> (Parameters)? <CLOSE_PAREN>
               <OPEN_CURL> (MethodContent ReturnStatement) #MethodBody <CLOSE_CURL>;

Parameters #void: Parameter ( <COMMA> Parameter )* ;

Parameter: Type
           <IDENT> ({jjtThis.put("name", lastConsumedToken.getImage()); });

ReturnStatement: <RETURN> Expression <SEMICOLON>;

MethodContent #void: (VarDeclaration)* (Statement)*;

Statement #void: ScopeStatement |
                 IfThenElseStatement |
                 WhileStatement |
                 Expression (<EQUALS> Expression #Assignment(2))? <SEMICOLON>;

ScopeStatement: <OPEN_CURL> (Statement)* <CLOSE_CURL>;

IfThenElseStatement: <IF> <OPEN_PAREN> Expression <CLOSE_PAREN> Statement <ELSE> Statement;

WhileStatement: <WHILE> <OPEN_PAREN> Expression <CLOSE_PAREN> Statement;

Expression #void: AndExpression;

AndExpression #void: CompareExpression ((<AND> CompareExpression { jjtThis.put("op", "&&"); }) #BinaryOp(2))* ;

CompareExpression #void: AdditiveExpression ((<LT> AdditiveExpression { jjtThis.put("op", "<"); }) #BinaryOp(2))* ;

AdditiveExpression #void: MultiplicativeExpression (
                            (<PLUS> MultiplicativeExpression {jjtThis.put("op", "+"); }) #BinaryOp(2) |
                            (<MINUS> MultiplicativeExpression {jjtThis.put("op", "-"); }) #BinaryOp(2))* ;

MultiplicativeExpression #void: UnaryExpression (
                            (<TIMES> UnaryExpression {jjtThis.put("op", "*"); }) #BinaryOp(2) |
                            (<DIVIDE> UnaryExpression {jjtThis.put("op", "/"); }) #BinaryOp(2))* ;

UnaryExpression #void: NotExpression | AccessExpression;

NotExpression: <NOT> UnaryExpression;

NewExpression #void: NewIntArray | NewObject ;

NewIntArray: <INT> <OPEN_SQUARE> Expression <CLOSE_SQUARE> ;

NewObject: (
                <IDENT> ({jjtThis.put("type", lastConsumedToken.getImage()); jjtThis.put("isArray", "false"); }) |
                <STRING> ({jjtThis.put("type", "String"); jjtThis.put("isArray", "false"); })
           )
            <OPEN_PAREN> <CLOSE_PAREN>;

AccessExpression #void: Operand (Indexing | (<DOT> CallExpression) )* ;

Indexing #Indexing(2): <OPEN_SQUARE> Expression <CLOSE_SQUARE> ;

CallExpression #void: LengthCall | MethodCall;

LengthCall #LengthCall(1): <LENGTH>;

MethodCall #MethodCall(2): <IDENT> ({jjtThis.put("methodname", lastConsumedToken.getImage()); })
            <OPEN_PAREN> MethodArguments <CLOSE_PAREN> ;

MethodArguments: (Expression (<COMMA> Expression)*)?;

Operand #void: IntegerLiteral |
        BooleanLiteral |
        <THIS> #ThisKeyword |
        <OPEN_PAREN> Expression <CLOSE_PAREN> |
        <NEW> NewExpression |
        (
            <IDENT> ({jjtThis.put("name", lastConsumedToken.getImage()); }) |
            <STRING> ({jjtThis.put("name", "String"); })
        ) #Identifier;

IntegerLiteral: <INTEGER> ({jjtThis.put("val", lastConsumedToken.getImage()); jjtThis.put("type", "int"); jjtThis.put("isArray", "false");});
BooleanLiteral: (<TRUE> ({jjtThis.put("val", "1"); }) | <FALSE> ({jjtThis.put("val", "0"); })) ({ jjtThis.put("type", "boolean"); jjtThis.put("isArray", "false");});

// Injections for the implementation of JmmNode
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}